#!/usr/bin/env python3

import re
import argparse
from ipaddress import ip_address
import sys
from colorama import Fore, Style


def clean_ansi(text):
    """delete ANSI escape from input text"""
    ansi_escape = re.compile(r'\x1B(?:[@-Z\\-_]|\[[0-?]*[ -/]*[@-~])')
    return ansi_escape.sub('', text)

def ro_sort_dns_records(input_text, lo, priv, glob, silent, domains_only):
    # Парсим только айпишники в ro моде dnsx
    records = []
    for ip in input_text.split('\n'):
        if not ip:
            continue
        try:
            ip_obj = ip_address(ip)
            records.append((ip, ip_obj))
        except Exception as e:
            print(f"Failed to parse ip: '{ip}'")
            continue
    sorted_records = sorted(records, key=lambda x: x[1])
    
    if domains_only:
        # В режиме ro нет хостнеймов, поэтому выводим сообщение
        print("No hostnames available in -ro mode", file=sys.stderr)
        return
        
    print("LOOPBACK:") if not silent and not lo else None
    print('\n'.join(ip for ip, _ in sorted_records if _.is_loopback)) if not lo else None
    print("PRIVATE:") if not silent and not priv else None
    print('\n'.join(ip for ip, _ in sorted_records if _.is_private)) if not priv else None
    print("GLOBAL:") if not silent and not glob else None
    print('\n'.join(ip for ip, _ in sorted_records if _.is_global)) if not glob else None

def sort_dns_records(input_text, lo, priv, glob, silent, domains_only, no_color):
    # Очищаем текст от ANSI escape-последовательностей
    clean_text = clean_ansi(input_text)
    
    # Парсим записи
    records = []
    for line in clean_text.strip().split('\n'):
        line = line.strip()
        if not line:
            continue
        
        # Простой парсинг по частям
        try:
            hostname = line.split(' [A] [')[0].strip()
            ip = line.split(' [A] [')[1].strip(']').strip()
            ip_obj = ip_address(ip)
            records.append((hostname, ip, ip_obj))
        except Exception as e:
            print(f"Failed to parse line: '{line}'")
            continue

    # Сортируем записи по IP
    sorted_records = sorted(records, key=lambda x: x[2])
    
    if domains_only:
        loopback = [hostname for hostname, _, ip_obj in sorted_records if ip_obj.is_loopback]
        private = [hostname for hostname, _, ip_obj in sorted_records if ip_obj.is_private]
        global_ips = [hostname for hostname, _, ip_obj in sorted_records if ip_obj.is_global]
        
        print("LOOPBACK:") if not silent and not lo and loopback else None
        print('\n'.join(loopback)) if not lo else None
        print("PRIVATE:") if not silent and not priv and private else None
        print('\n'.join(private)) if not priv else None
        print("GLOBAL:") if not silent and not glob and global_ips else None
        print('\n'.join(global_ips)) if not glob else None
        return
    
    # Форматируем вывод с IP (с поддержкой отключения цвета)
    print("LOOPBACK:") if not silent and not lo else None
    if not lo:
        if no_color:
            print('\n'.join(f'[{ip}] {hostname}' for hostname, ip, _ in sorted_records if _.is_loopback))
        else:
            print('\n'.join(f'{f"[{Fore.CYAN}{ip}{Style.RESET_ALL}]":>17} {hostname}' for hostname, ip, _ in sorted_records if _.is_loopback))
    
    print("PRIVATE:") if not silent and not priv else None
    if not priv:
        if no_color:
            print('\n'.join(f'[{ip}] {hostname}' for hostname, ip, _ in sorted_records if _.is_private))
        else:
            print('\n'.join(f'{f"[{Fore.CYAN}{ip}{Style.RESET_ALL}]":>17} {hostname}' for hostname, ip, _ in sorted_records if _.is_private))
    
    print("GLOBAL:") if not silent and not glob else None
    if not glob:
        if no_color:
            print('\n'.join(f'[{ip}] {hostname}' for hostname, ip, _ in sorted_records if _.is_global))
        else:
            print('\n'.join(f'{f"[{Fore.CYAN}{ip}{Style.RESET_ALL}]":>17} {hostname}' for hostname, ip, _ in sorted_records if _.is_global))

def main():
    print(r'''                                          
 __  ___   _ _   _  __ _ _ __ ___  ___ _ ____  __
 \ \/ / | | | | | |/ _` | '__/ __|/ _ \ '__\ \/ /
  >  <| |_| | |_| | (_| | |  \__ \  __/ |   >  < 
 /_/\_\\__, |\__,_|\__,_|_|  |___/\___|_|  /_/\_\
       |___/                                     
                    made by sikoslike-the-greatest


    ''', file=sys.stderr)
    parser = argparse.ArgumentParser(description="dnsx parser, load file, or use pipeline (you can combine -lpgs flags)")
    parser.add_argument("-f", "--load", metavar="input_file", type=str, help="dnsx standart output file")
    parser.add_argument("-ro", action="store_true", help="use with dnsx -ro flag")
    parser.add_argument("-l", action="store_true", help="dont show loopback ips")
    parser.add_argument("-p", action="store_true", help="dont show private ips")
    parser.add_argument("-g", action="store_true", help="dont show global ips")
    parser.add_argument("-s", action="store_true", help="silent (dont show comments like GLOBAL)")
    parser.add_argument("-d", action="store_true", help="show only hostnames without IP addresses")
    parser.add_argument("-c", action="store_true", help="disable colored IP addresses")

    args = parser.parse_args()

    if args.load:
        try:
            with open(args.load, 'r', encoding='utf-8') as file:
                input_text = file.read()
        except FileNotFoundError:
            print(f"file {args.load} not found")
            sys.exit(1)
    else:
        input_text = sys.stdin.read()
    
    if args.ro:
        ro_sort_dns_records(input_text, args.l, args.p, args.g, args.s, args.d)
    else:
        sort_dns_records(input_text, args.l, args.p, args.g, args.s, args.d, args.c)

if __name__ == "__main__":
    main()